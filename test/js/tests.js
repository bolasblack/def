// Generated by CoffeeScript 1.3.3
(function() {

  describe("the def lib", function() {
    var should;
    should = chai.should();
    beforeEach(function() {});
    afterEach(function() {});
    it("should handler one or three argument", function() {
      def([]).should.have.property('defed');
      def([], this, 'array');
      this.should.to.have.property('array');
      return this.array.should.to.have.property('defed');
    });
    it("should judge object type", function() {
      var type, typeFixtrue, value, _i, _len, _ref, _results;
      typeFixtrue = [
        {
          type: "Array",
          value: []
        }, {
          type: "PlainObject",
          value: {}
        }, {
          type: "Boolean",
          value: true
        }, {
          type: "Function",
          value: function() {}
        }, {
          type: "String",
          value: "some string"
        }, {
          type: "Number",
          value: 3
        }, {
          type: "Date",
          value: new Date
        }, {
          type: "RegExp",
          value: /.*/
        }, {
          type: "Node",
          value: document
        }, {
          type: "Element",
          value: document.createElement("p")
        }
      ];
      _results = [];
      for (_i = 0, _len = typeFixtrue.length; _i < _len; _i++) {
        _ref = typeFixtrue[_i], type = _ref.type, value = _ref.value;
        _results.push(def.isType(type, value).should.be["true"]);
      }
      return _results;
    });
    it("should register judge", function() {
      def(function(obj) {
        return obj === "testcase";
      }, "judge", "testcase");
      def.isType("testcase", "testcase").should.be["true"];
      return def.isType("testcase", "estcase").should.be["false"];
    });
    it("should can be overwrite registered judge", function() {
      def(function(obj) {
        return obj === "estcase";
      }, "judge", "testcase");
      def.isType("testcase", "testcase").should.be["false"];
      return def.isType("testcase", "estcase").should.be["true"];
    });
    it("should extend pass in object by prototype");
    return it("should extend pass in object with 4th argument of `def`");
  });

}).call(this);
