// Generated by CoffeeScript 1.3.3
(function() {

  describe("the def lib", function() {
    var should;
    should = chai.should();
    beforeEach(function() {
      var self;
      this.extendSpy = sinon.spy();
      self = this;
      return def((function() {
        return self.extendSpy.call(this);
      }), "Array", "extendtest");
    });
    afterEach(function() {
      return delete this.extendSpy;
    });
    it("should handler one or three argument", function() {
      var testContext;
      def([], (testContext = {}), 'array');
      testContext.array.should.to.be.an("array");
      testContext.array.defed.should.to.be["true"];
      return def([]).defed.should.to.be["true"];
    });
    it("should judge object type", function() {
      var type, typeFixtrue, value, _i, _len, _ref, _results;
      typeFixtrue = [
        {
          type: "Array",
          value: []
        }, {
          type: "PlainObject",
          value: {}
        }, {
          type: "Boolean",
          value: true
        }, {
          type: "Function",
          value: function() {}
        }, {
          type: "String",
          value: "some string"
        }, {
          type: "Number",
          value: 3
        }, {
          type: "Date",
          value: new Date
        }, {
          type: "RegExp",
          value: /.*/
        }, {
          type: "Node",
          value: document
        }, {
          type: "Element",
          value: document.createElement("p")
        }
      ];
      _results = [];
      for (_i = 0, _len = typeFixtrue.length; _i < _len; _i++) {
        _ref = typeFixtrue[_i], type = _ref.type, value = _ref.value;
        _results.push(def.isType(type, value).should.be["true"]);
      }
      return _results;
    });
    it("should register judge", function() {
      def(function(obj) {
        return obj === "testcase";
      }, "judge", "testcase");
      def.isType("testcase", "testcase").should.be["true"];
      return def.isType("testcase", "estcase").should.be["false"];
    });
    it("should can be overwrite registered judge", function() {
      def(function(obj) {
        return obj === "estcase";
      }, "judge", "testcase");
      def.isType("testcase", "testcase").should.be["false"];
      return def.isType("testcase", "estcase").should.be["true"];
    });
    it("should extend pass in object", function() {
      var array;
      array = def([]);
      array.should.have.property("extendtest");
      array.extendtest();
      return this.extendSpy.calledOn(array).should.be["true"];
    });
    it("should extend pass in object with 4th argument of `def`", function() {
      var array, extra;
      extra = {
        Array: {
          testProp: true
        }
      };
      array = def([], extra);
      array.should.have.property("testProp");
      return array.testProp.should.be["true"];
    });
    return it("should extend underscore method default", function() {
      var content, method, methods, specs, _i, _len, _ref, _results;
      specs = [
        {
          content: [],
          methods: "first initial last rest compact flatten without union intersection difference uniq zip object range"
        }, {
          content: {},
          methods: "keys values pairs invert functions extend pick omit defaults clone tap has"
        }, {
          content: (function() {}),
          methods: "bind partial memoize delay defer throttle debounce once wrap"
        }
      ];
      _results = [];
      for (_i = 0, _len = specs.length; _i < _len; _i++) {
        _ref = specs[_i], content = _ref.content, methods = _ref.methods;
        content = def(content);
        _results.push((function() {
          var _j, _len1, _ref1, _results1;
          _ref1 = methods.split(" ");
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            method = _ref1[_j];
            _results1.push(content.should.have.property(method));
          }
          return _results1;
        })());
      }
      return _results;
    });
  });

}).call(this);
