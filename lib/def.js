// Generated by CoffeeScript 1.3.3
(function() {
  var __slice = [].slice;

  (function(definition) {
    if (typeof define === "function") {
      return define(definition);
    } else if (typeof YUI === "function") {
      return YUI.add("", definition);
    } else {
      return definition();
    }
  })(function() {
    /*
      def property, "extra"
      def fn, "judge", className
      def obj, [context, varname]
    */

    var bindToContext, className, classes, def, extend, olddef, regExtend, regJudge, typeJudge, _i, _len, _ref, _results;
    def = function() {
      var args, fn, obj;
      obj = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (obj == null) {
        throw new Error('must pass in an object');
      }
      obj.defed = true;
      if (args.length) {
        fn = (function() {
          switch (args[0]) {
            case "judge":
              return regJudge;
            case "extra":
              return regExtend;
            default:
              return bindToContext(args[0]);
          }
        })();
        fn(obj, args[1]);
      }
      return obj;
    };
    def.isType = function(type, obj) {
      return typeJudge[type](obj);
    };
    def._typeJudge = typeJudge = {};
    regJudge = function(judge, className) {
      return typeJudge[className] = judge;
    };
    def._extend = extend = {};
    regExtend = function(value, className) {
      return extend[className] = value;
    };
    bindToContext = function(context) {
      return function(obj, varname) {
        return context[varname] = obj;
      };
    };
    olddef = this.def;
    this.def = def;
    classes = "PlainObject Boolean Array Function String Number Date RegExp".split(" ");
    _ref = classes.concat(["Node", "XMLDoc", "Element"]);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      className = _ref[_i];
      _results.push((function(className) {
        return def(function(obj) {
          return G["is" + className](obj);
        }, "judge", className);
      })(className));
    }
    return _results;
  });

}).call(this);
